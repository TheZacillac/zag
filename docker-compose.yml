name: rag

services:
  db:
    image: pgvector/pgvector:pg16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ragdb
      POSTGRES_USER: rag
      POSTGRES_PASSWORD: ragpass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag -d ragdb"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - ragnet

  polars-worker:
    build:
      context: ./polars
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://rag:ragpass@db:5432/ragdb
      OLLAMA_HOST: http://host.docker.internal:11434
      EMBED_MODEL: embeddinggemma
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./polars/app:/app
      - ./data:/data
    networks:
      - ragnet
    extra_hosts:
      - "host.docker.internal:host-gateway"

  digester:
    build:
      context: ./digester
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      polars-worker:
        condition: service_healthy
    environment:
      DIGEST_PATH: /digestion
      POLARS_API: http://polars-worker:8080
      PYTHONUNBUFFERED: 1
    volumes:
      - ./digestion:/digestion:rw
    networks:
      - ragnet
    healthcheck:
      test: ["CMD-SHELL", "pgrep -x digester > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  embedder:
    build:
      context: ./polars
      dockerfile: Dockerfile
    command: ["python", "-u", "/app/embed_worker.py"]
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://rag:ragpass@db:5432/ragdb
      OLLAMA_HOST: http://host.docker.internal:11434
      EMBED_MODEL: embeddinggemma
      PYTHONUNBUFFERED: 1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ragnet
    extra_hosts:
      - "host.docker.internal:host-gateway"
      
  reranker:
    build:
      context: ./polars
      dockerfile: Dockerfile
    command: ["python", "-u", "/app/rerank_worker.py"]
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://rag:ragpass@db:5432/ragdb
      OLLAMA_HOST: http://host.docker.internal:11434
      RERANK_MODEL: all-minilm     # Using proper reranking model
      BATCH_SIZE: 50
      SLEEP_SEC: 30
      PYTHONUNBUFFERED: 1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ragnet
    extra_hosts:
      - "host.docker.internal:host-gateway"

  chat-tui:
    profiles:
      - chat
    build:
      context: ./chat-tui
      dockerfile: Dockerfile
    stdin_open: true
    tty: true
    restart: "no"
    environment:
      POLARS_API: http://polars-worker:8080
      OLLAMA_HOST: http://host.docker.internal:11434
      CHAT_MODEL: gpt-oss:120b
    depends_on:
      polars-worker:
        condition: service_healthy
    networks:
      - ragnet
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  pgdata:

networks:
  ragnet:
    driver: bridge
